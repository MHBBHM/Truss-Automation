import numpy as np
import calfem.core as cfc

e = int(input("Enter the number of Elements: "))
n = int(input("Enter the number of Nodes: "))
K = np.zeros((n, n))
f = np.zeros((n, 1))
Edof = np.zeros((e, 4), dtype=int)
ex = np.zeros((e, 2), dtype=int)
ey = np.zeros((e, 2), dtype=int)
ep = np.zeros((e, 2), dtype=int)

# Getting input for node to node history
for i in range(e):
    val_1 = int(input(f"Enter initial node number for x direction of bar element {i + 1} = "))
    val_2 = int(input(f"Enter initial node number for y direction of bar element {i + 1} = "))
    val_3 = int(input(f"Enter final node number for x direction of bar element {i + 1} = "))
    val_4 = int(input(f"Enter final node number for y direction of bar element {i + 1} = "))
    print("")
    Edof[i] = [val_1, val_2, val_3, val_4]

for i in range(e):
    x1 = float(input(f"Enter bar element {i+1} initial coordinate for x direction as 'mm' = "))
    y1 = float(input(f"Enter bar element {i+1} initial coordinate for y direction as 'mm' = "))
    x2 = float(input(f"Enter bar element {i+1} final coordinate for x direction as 'mm' = "))
    y2 = float(input(f"Enter bar element {i+1} final coordinate for y direction as 'mm' = "))
    A = float(input(f"Enter bar element {i+1} Area  as 'mm\u00B2' = "))
    E = float(input(f"Enter bar element {i+1} Elastic Modulus as 'GPa' = "))
    print("")
    ex[i] = [x1, x2]
    ey[i] = [y1, y2]
    ep[i] = [E, A]

for elx, ely, eltopo, elep in zip(ex, ey, Edof, ep):
    E, A = elep  # Unpack E and A from elep
    Ke = cfc.bar2e(elx, ely, [E, A])  # Pass E and A separately
    cfc.assem(eltopo, K, Ke)

for i in range(n):
    a = float(input(f"Enter node {i + 1} force as 'kN' = "))
    f[i] = a

print("")

b = int(input("Enter the number of fixed degree of freedom = "))

print("")

bc = np.zeros(b, dtype=int)

for i in range(b):
    element = int(input(f"Enter support {i + 1} node number = "))
    bc[i] = element

U,F =cfc.solveq(K,f,bc)

print(f"\nGlobal Stiffness Matrix\n\n{K}\n\nForce Vector\n\n{f}\n\nDisplacement (mm)\n\n{np.around(U, decimals=3)}\n\nForce (kN)\n\n{np.around(F, decimals=3)}\n")

for i, elx, ely, eltopo, elep in zip(range(e), ex, ey, Edof, ep):
    E, A = elep
    N = cfc.bar2s(elx, ely, [E, A], cfc.extract_eldisp(eltopo, U))
    stress_value = np.around(N[0, 0], decimals=3)

    if stress_value < 0:
        print(f"Stress of element bar {i+1} = {stress_value} GPa (Compression bar)")
    else:
        print(f"Stress of element bar {i+1} = {stress_value} GPa (Tension bar)")
